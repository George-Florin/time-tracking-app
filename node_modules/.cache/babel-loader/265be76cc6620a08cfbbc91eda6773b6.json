{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Documents\\\\Projects\\\\time-tracking-app\\\\src\\\\components\\\\Project.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './styles/Project.css';\nimport { FaTrash, FaEye, FaRedo } from 'react-icons/fa';\nimport { Link } from \"react-router-dom\";\nimport EdiText from 'react-editext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Project = ({\n  project,\n  onDelete\n}) => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [title, setTitle] = useLocalStorage(\"\");\n  const [description, setDescription] = useLocalStorage(\"\");\n\n  const handleSave = val => {\n    console.log('Edited value ->', val);\n    setTitle(val);\n  };\n\n  const handleEdit = val => {\n    console.log('Edited value ->', val);\n    setDescription(val);\n  };\n\n  const [text, setText] = useState('');\n  console.log(text);\n  useEffect(() => {\n    const getText = async () => {\n      const textFromServer = await fetchText();\n      setText(textFromServer);\n    };\n\n    getText();\n  }, []); // Fetch Projects\n\n  const fetchText = async () => {\n    const res = await fetch('http://localhost:5000/text');\n    const data = await res.json();\n    return data;\n  }; // Add project\n\n\n  const addText = async text => {\n    const res = await fetch('http://localhost:5000/text', {\n      method: 'POST',\n      headers: {\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(project)\n    });\n    const data = await res.json();\n    setText([...text, data]);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"project-component\",\n        children: [/*#__PURE__*/_jsxDEV(EdiText, {\n          type: \"text\",\n          className: \"project-title\",\n          value: title,\n          onSave: handleSave,\n          onChange: e => setTitle(e.target.title),\n          showButtonsOnHover: true,\n          submitOnUnfocus: true,\n          cancelOnUnfocus: true,\n          onAdd: addText\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(EdiText, {\n          type: \"textarea\",\n          className: \"project-description\",\n          value: description,\n          onSave: handleEdit,\n          onChange: e => setDescription(e.target.description),\n          showButtonsOnHover: true,\n          submitOnUnfocus: true,\n          cancelOnUnfocus: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          to: `/projectpage/${project.id}`,\n          className: \"view-icon\",\n          children: /*#__PURE__*/_jsxDEV(FaEye, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 83\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(FaTrash, {\n          className: \"delete-icon\",\n          onClick: () => onDelete(project.id)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this);\n  }; // Hook\n\n\n  function useLocalStorage(key, initialValue) {\n    _s();\n\n    // State to store our value\n    // Pass initial state function to useState so logic is only executed once\n    const [storedValue, setStoredValue] = useState(() => {\n      try {\n        // Get from local storage by key\n        const item = window.localStorage.getItem(key); // Parse stored json or if none return initialValue\n\n        return item ? JSON.parse(item) : initialValue;\n      } catch (error) {\n        // If error also return initialValue\n        console.log(error);\n        return initialValue;\n      }\n    }); // Return a wrapped version of useState's setter function that ...\n    // ... persists the new value to localStorage.\n\n    const setValue = value => {\n      try {\n        // Allow value to be a function so we have same API as useState\n        const valueToStore = value instanceof Function ? value(storedValue) : value; // Save state\n\n        setStoredValue(valueToStore); // Save to local storage\n\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      } catch (error) {\n        // A more advanced implementation would handle the error case\n        console.log(error);\n      }\n    };\n\n    return [storedValue, setValue];\n  }\n\n  _s(useLocalStorage, \"+V6MHBu6i/5rq6qoIqnMZeR/gRU=\");\n};\n\n_s2(Project, \"dFk8Ll99ZsoVy4Lq7w8KIhVX2Uk=\", true);\n\n_c = Project;\nexport default Project;\n\nvar _c;\n\n$RefreshReg$(_c, \"Project\");","map":{"version":3,"sources":["C:/Users/User/Documents/Projects/time-tracking-app/src/components/Project.js"],"names":["React","useState","useEffect","FaTrash","FaEye","FaRedo","Link","EdiText","Project","project","onDelete","title","setTitle","useLocalStorage","description","setDescription","handleSave","val","console","log","handleEdit","text","setText","getText","textFromServer","fetchText","res","fetch","data","json","addText","method","headers","body","JSON","stringify","e","target","id","key","initialValue","storedValue","setStoredValue","item","window","localStorage","getItem","parse","error","setValue","value","valueToStore","Function","setItem"],"mappings":"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","sourcesContent":["import React, { useState, useEffect }from 'react';\r\nimport './styles/Project.css';\r\nimport { FaTrash, FaEye, FaRedo} from 'react-icons/fa';\r\nimport { Link } from \"react-router-dom\";\r\nimport EdiText from 'react-editext';\r\n\r\n\r\nconst Project = ({ project, onDelete}) => {\r\n    const [title, setTitle] = useLocalStorage(\"\")\r\n    const [description, setDescription] = useLocalStorage(\"\")\r\n\r\n    const handleSave = (val) => {\r\n        console.log('Edited value ->', val);\r\n        setTitle(val);\r\n    } \r\n\r\n    const handleEdit = (val) => {\r\n      console.log('Edited value ->', val);\r\n      setDescription(val);\r\n  } \r\n\r\n  const [text, setText] = useState('')\r\n\r\n  console.log(text)\r\n\r\n  useEffect(() => {\r\n    const getText = async () => {\r\n      const textFromServer = await fetchText()\r\n      setText(textFromServer)\r\n    }\r\n\r\n    getText()\r\n  }, [])\r\n\r\n// Fetch Projects\r\nconst fetchText = async () => {\r\n  const res = await fetch('http://localhost:5000/text')\r\n  const data = await res.json()\r\n\r\n  return data\r\n}\r\n\r\n// Add project\r\nconst addText = async (text) => {\r\n  const res = await fetch ('http://localhost:5000/text', {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-type': 'application/json'\r\n    },\r\n    body: JSON.stringify(project)\r\n  })\r\n\r\n  const data = await res.json()\r\n\r\n  setText([...text, data])\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"project-component\">\r\n                    <EdiText \r\n                    type=\"text\" \r\n                    className=\"project-title\" \r\n                    value={title} \r\n                    onSave={handleSave} \r\n                    onChange={(e) => setTitle(e.target.title)}\r\n                    showButtonsOnHover\r\n                    submitOnUnfocus\r\n                    cancelOnUnfocus\r\n                    onAdd={addText}\r\n                    />\r\n                    <br/>\r\n                    <EdiText \r\n                    type=\"textarea\" \r\n                    className=\"project-description\" \r\n                    value={description} \r\n                    onSave={handleEdit} \r\n                    onChange={(e) => setDescription(e.target.description)}\r\n                    showButtonsOnHover\r\n                    submitOnUnfocus\r\n                    cancelOnUnfocus\r\n                    />\r\n                    <Link to={`/projectpage/${project.id}`} className=\"view-icon\"><FaEye/></Link>\r\n                    <FaTrash className=\"delete-icon\" onClick={() => onDelete(project.id)}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n// Hook\r\nfunction useLocalStorage(key, initialValue) {\r\n    // State to store our value\r\n    // Pass initial state function to useState so logic is only executed once\r\n    const [storedValue, setStoredValue] = useState(() => {\r\n      try {\r\n        // Get from local storage by key\r\n        const item = window.localStorage.getItem(key);\r\n        // Parse stored json or if none return initialValue\r\n        return item ? JSON.parse(item) : initialValue;\r\n      } catch (error) {\r\n        // If error also return initialValue\r\n        console.log(error);\r\n        return initialValue;\r\n      }\r\n    });\r\n    // Return a wrapped version of useState's setter function that ...\r\n    // ... persists the new value to localStorage.\r\n    const setValue = (value) => {\r\n      try {\r\n        // Allow value to be a function so we have same API as useState\r\n        const valueToStore =\r\n          value instanceof Function ? value(storedValue) : value;\r\n        // Save state\r\n        setStoredValue(valueToStore);\r\n        // Save to local storage\r\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n      } catch (error) {\r\n        // A more advanced implementation would handle the error case\r\n        console.log(error);\r\n      }\r\n    };\r\n    return [storedValue, setValue];\r\n  }\r\n}\r\nexport default Project"]},"metadata":{},"sourceType":"module"}